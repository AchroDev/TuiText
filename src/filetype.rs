pub struct FileType {
    name: String,
    hl_opts: HighlightingOptions,
}

#[derive(Default)]
pub struct HighlightingOptions {
    numbers: bool,
    strings: bool,
    characters: bool,
    comments: bool,
    multiline_comments: bool,
    primary_keywords: Vec<String>,
    secondary_keywords: Vec<String>,
}

impl Default for FileType {
    fn default() -> Self {
        Self {
            name: String::from("No filetype"),
            hl_opts: HighlightingOptions::default(),
        }
    }
}

impl FileType {
    #[must_use]
    pub fn name(&self) -> String {
        self.name.clone()
    }

    #[must_use]
    pub fn highlighting_options(&self) -> &HighlightingOptions {
        &self.hl_opts
    }

    #[must_use]
    pub fn from(file_name: &str) -> Self {
        if file_name.ends_with(".rs") {
            return Self {
                name: String::from("Rust"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "as".to_string(),
                        "break".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "crate".to_string(),
                        "else".to_string(),
                        "enum".to_string(),
                        "extern".to_string(),
                        "false".to_string(),
                        "fn".to_string(),
                        "for".to_string(),
                        "if".to_string(),
                        "impl".to_string(),
                        "in".to_string(),
                        "let".to_string(),
                        "loop".to_string(),
                        "match".to_string(),
                        "mod".to_string(),
                        "move".to_string(),
                        "mut".to_string(),
                        "pub".to_string(),
                        "ref".to_string(),
                        "return".to_string(),
                        "self".to_string(),
                        "Self".to_string(),
                        "static".to_string(),
                        "struct".to_string(),
                        "super".to_string(),
                        "trait".to_string(),
                        "true".to_string(),
                        "type".to_string(),
                        "unsafe".to_string(),
                        "use".to_string(),
                        "where".to_string(),
                        "while".to_string(),
                        "dyn".to_string(),
                        "abstract".to_string(),
                        "become".to_string(),
                        "box".to_string(),
                        "do".to_string(),
                        "final".to_string(),
                        "macro".to_string(),
                        "override".to_string(),
                        "priv".to_string(),
                        "typeof".to_string(),
                        "unsized".to_string(),
                        "virtual".to_string(),
                        "yield".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "try".to_string(),
                    ],
                    secondary_keywords: vec![
                        "bool".to_string(),
                        "char".to_string(),
                        "i8".to_string(),
                        "i16".to_string(),
                        "i32".to_string(),
                        "i64".to_string(),
                        "isize".to_string(),
                        "u8".to_string(),
                        "u16".to_string(),
                        "u32".to_string(),
                        "u64".to_string(),
                        "usize".to_string(),
                        "f32".to_string(),
                        "f64".to_string(),
                    ],
                },
            };
        }
        if file_name.ends_with(".kt") {
            return Self {
                name: String::from("Kotlin"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "as".to_string(),
                        "as?".to_string(),
                        "break".to_string(),
                        "catch".to_string(),
                        "class".to_string(),
                        "continue".to_string(),
                        "do".to_string(),
                        "else".to_string(),
                        "false".to_string(),
                        "for".to_string(),
                        "finally".to_string(),
                        "fun".to_string(),
                        "if".to_string(),
                        "in".to_string(),
                        "!in".to_string(),
                        "is".to_string(),
                        "!is".to_string(),
                        "null".to_string(),
                        "object".to_string(),
                        "package".to_string(),
                        "return".to_string(),
                        "super".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "try".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "try".to_string(),
                        "typealias".to_string(),
                        "val".to_string(),
                        "var".to_string(),
                        "when".to_string(),
                        "while".to_string(),
                    ],
                    secondary_keywords: vec![
                        "abstract".to_string(),
                        "annotation".to_string(),
                        "by".to_string(),
                        "companion".to_string(),
                        "const".to_string(),
                        "constructor".to_string(),
                        "crossinline".to_string(),
                        "data".to_string(),
                        "delegate".to_string(),
                        "dynamic".to_string(),
                        "enum".to_string(),
                        "expect".to_string(),
                        "external".to_string(),
                        "field".to_string(),
                        "file".to_string(),
                        "get".to_string(),
                        "import".to_string(),
                        "infix".to_string(),
                        "init".to_string(),
                        "inline".to_string(),
                        "inner".to_string(),
                        "internal".to_string(),
                        "lateinit".to_string(),
                        "noinline".to_string(),
                        "open".to_string(),
                        "operator".to_string(),
                        "out".to_string(),
                        "override".to_string(),
                        "param".to_string(),
                        "private".to_string(),
                        "property".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "receiver".to_string(),
                        "reified".to_string(),
                        "sealed".to_string(),
                        "set".to_string(),
                        "setparam".to_string(),
                        "suspend".to_string(),
                        "tailrec".to_string(),
                        "value".to_string(),
                        "vararg".to_string(),
                        "where".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".kts") {
            return Self {
                name: String::from("Kotlin"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "as".to_string(),
                        "as?".to_string(),
                        "break".to_string(),
                        "catch".to_string(),
                        "class".to_string(),
                        "continue".to_string(),
                        "do".to_string(),
                        "else".to_string(),
                        "false".to_string(),
                        "for".to_string(),
                        "finally".to_string(),
                        "fun".to_string(),
                        "if".to_string(),
                        "in".to_string(),
                        "!in".to_string(),
                        "is".to_string(),
                        "!is".to_string(),
                        "null".to_string(),
                        "object".to_string(),
                        "package".to_string(),
                        "return".to_string(),
                        "super".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "try".to_string(),
                        "throw".to_string(),
                        "true".to_string(),
                        "try".to_string(),
                        "typealias".to_string(),
                        "val".to_string(),
                        "var".to_string(),
                        "when".to_string(),
                        "while".to_string(),
                    ],
                    secondary_keywords: vec![
                        "abstract".to_string(),
                        "annotation".to_string(),
                        "by".to_string(),
                        "companion".to_string(),
                        "const".to_string(),
                        "constructor".to_string(),
                        "crossinline".to_string(),
                        "data".to_string(),
                        "delegate".to_string(),
                        "dynamic".to_string(),
                        "enum".to_string(),
                        "expect".to_string(),
                        "external".to_string(),
                        "field".to_string(),
                        "file".to_string(),
                        "get".to_string(),
                        "import".to_string(),
                        "infix".to_string(),
                        "init".to_string(),
                        "inline".to_string(),
                        "inner".to_string(),
                        "internal".to_string(),
                        "lateinit".to_string(),
                        "noinline".to_string(),
                        "open".to_string(),
                        "operator".to_string(),
                        "out".to_string(),
                        "override".to_string(),
                        "param".to_string(),
                        "private".to_string(),
                        "property".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "receiver".to_string(),
                        "reified".to_string(),
                        "sealed".to_string(),
                        "set".to_string(),
                        "setparam".to_string(),
                        "suspend".to_string(),
                        "tailrec".to_string(),
                        "value".to_string(),
                        "vararg".to_string(),
                        "where".to_string(),
                    ],
                },
            };
        }
        if file_name.ends_with(".js") {
            return Self {
                name: String::from("JavaScript"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                    secondary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                },
            };
        } else if file_name.ends_with(".jsx") {
            return Self {
                name: String::from("JavaScript XML (React)"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                    secondary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                },
            };
        }
        if file_name.ends_with(".go") {
            return Self {
                name: String::from("Go"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                    secondary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                },
            };
        }
        if file_name.ends_with(".c") {
            return Self {
                name: String::from("C"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                    secondary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                },
            };
        }
        if file_name.ends_with(".cpp") {
            return Self {
                name: String::from("C++"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    primary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                    secondary_keywords: vec![
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                        "".to_string(),
                    ],
                },
            };
        }
        Self::default()
    }
}

impl HighlightingOptions {
    pub fn numbers(&self) -> bool {
        self.numbers
    }

    pub fn strings(&self) -> bool {
        self.strings
    }

    pub fn characters(&self) -> bool {
        self.characters
    }

    pub fn comments(&self) -> bool {
        self.comments
    }

    pub fn multiline_comments(&self) -> bool {
        self.multiline_comments
    }

    pub fn primary_keywords(&self) -> &Vec<String> {
        &self.primary_keywords
    }

    pub fn secondary_keywords(&self) -> &Vec<String> {
        &self.secondary_keywords
    }
}
